{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started Working inside Docker (slower) Build BreatheCode Dev docker image Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in you operating system python -m scripts.doctor # Generate the BreatheCode Dev docker image docker-compose build bc-dev Testing inside BreatheCode Dev # Open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path Run BreatheCode API as docker service # open BreatheCode API as a service and export the port 8000 docker-compose up -d bc-dev # open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # create super user pipenv run python manage.py createsuperuser # Close the BreatheCode Dev exit # See the output of Django docker-compose logs -f bc-dev # open localhost:8000 to view the api # open localhost:8000/admin to view the admin Working in your local machine (recomended) Installation in your local machine Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in you operating system python -m scripts.doctor # Setting up the redis and postgres database, you also can install manually in your local machine this databases docker-compose up -d redis postgres # Install and setting up your development environment (this command replace your .env file) python -m scripts.install Testing in your local machine # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path Run BreatheCode API in your local machine # Collect statics pipenv run python manage.py collectstatic --noinput # Run migrations pipenv run python manage.py migrate # Load fixtures (populate the database) pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json # Create super user pipenv run python manage.py createsuperuser # Run server pipenv run start # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#working-inside-docker-slower","text":"","title":"Working inside Docker (slower)"},{"location":"#build-breathecode-dev-docker-image","text":"Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in you operating system python -m scripts.doctor # Generate the BreatheCode Dev docker image docker-compose build bc-dev","title":"Build BreatheCode Dev docker image"},{"location":"#testing-inside-breathecode-dev","text":"# Open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path","title":"Testing inside BreatheCode Dev"},{"location":"#run-breathecode-api-as-docker-service","text":"# open BreatheCode API as a service and export the port 8000 docker-compose up -d bc-dev # open the BreatheCode Dev, this shell don't export the port 8000 docker-compose run bc-dev fish # create super user pipenv run python manage.py createsuperuser # Close the BreatheCode Dev exit # See the output of Django docker-compose logs -f bc-dev # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Run BreatheCode API as docker service"},{"location":"#working-in-your-local-machine-recomended","text":"","title":"Working in your local machine (recomended)"},{"location":"#installation-in-your-local-machine","text":"Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . # Check which dependencies you need install in you operating system python -m scripts.doctor # Setting up the redis and postgres database, you also can install manually in your local machine this databases docker-compose up -d redis postgres # Install and setting up your development environment (this command replace your .env file) python -m scripts.install","title":"Installation in your local machine"},{"location":"#testing-in-your-local-machine","text":"# Testing pipenv run test ./breathecode/activity # path # Testing in parallel pipenv run ptest ./breathecode/activity # path # Coverage pipenv run cov breathecode.activity # python module path # Coverage in parallel pipenv run pcov breathecode.activity # python module path","title":"Testing in your local machine"},{"location":"#run-breathecode-api-in-your-local-machine","text":"# Collect statics pipenv run python manage.py collectstatic --noinput # Run migrations pipenv run python manage.py migrate # Load fixtures (populate the database) pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json # Create super user pipenv run python manage.py createsuperuser # Run server pipenv run start # open localhost:8000 to view the api # open localhost:8000/admin to view the admin","title":"Run BreatheCode API in your local machine"},{"location":"endponts/","text":"Enpoints Documentation Postman OpenApi","title":"Enpoints Documentation"},{"location":"endponts/#enpoints-documentation","text":"Postman OpenApi","title":"Enpoints Documentation"},{"location":"apps/activities/","text":"Activity API This API uses Google DataStore as storage, there is not local storage on Heroku or Postgress. We need Google DataStore because we plan to store hugh amounts of activities that the user can do inside breathecode. Possible activities (so far): \"breathecode_login\" //every time it logs in \"online_platform_registration\" //first day using breathecode \"public_event_attendance\" //attendy on an eventbrite event \"classroom_attendance\" //when the student attent to class \"classroom_unattendance\" //when the student miss class \"lesson_opened\" //when a lessons is opened on the platform \"office_attendance\" //when the office raspberry pi detects the student \"nps_survey_answered\" //when a nps survey is answered by the student \"exercise_success\" //when student successfuly tests exercise Any activity has the following inputs: 'cohort', 'data', 'day', 'slug', 'user_agent', Endpoints for the user Get recent user activity GET: activity/user/{email_or_id}?slug=activity_slug Add a new user activity (requiers autentication) POST: activity/user/{email_or_id} { 'slug' => 'activity_slug', 'data' => 'any aditional data (string or json-encoded-string)' } \ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this: { 'slug' => 'activity_slug', 'data' => \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id) } Endpoints for the Cohort Get recent user activity GET: activity/cohort/{slug_or_id}?slug=activity_slug Endpoints for the coding_error's Get recent user coding_errors GET: activity/coding_error/{email_or_id}?slug=activity_slug Add a new coding_error (requiers autentication) POST: activity/coding_error/ { \"user_id\" => \"my@email.com\", \"slug\" => \"webpack_error\", \"data\" => \"optiona additional information about the error\", \"message\" => \"file not found\", \"name\" => \"module-not-found, \"severity\" => \"900\", \"details\" => \"stack trace for the error as string\" }","title":"Activities"},{"location":"apps/activities/#activity-api","text":"This API uses Google DataStore as storage, there is not local storage on Heroku or Postgress. We need Google DataStore because we plan to store hugh amounts of activities that the user can do inside breathecode. Possible activities (so far): \"breathecode_login\" //every time it logs in \"online_platform_registration\" //first day using breathecode \"public_event_attendance\" //attendy on an eventbrite event \"classroom_attendance\" //when the student attent to class \"classroom_unattendance\" //when the student miss class \"lesson_opened\" //when a lessons is opened on the platform \"office_attendance\" //when the office raspberry pi detects the student \"nps_survey_answered\" //when a nps survey is answered by the student \"exercise_success\" //when student successfuly tests exercise Any activity has the following inputs: 'cohort', 'data', 'day', 'slug', 'user_agent',","title":"Activity API"},{"location":"apps/activities/#endpoints-for-the-user","text":"Get recent user activity GET: activity/user/{email_or_id}?slug=activity_slug Add a new user activity (requiers autentication) POST: activity/user/{email_or_id} { 'slug' => 'activity_slug', 'data' => 'any aditional data (string or json-encoded-string)' } \ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this: { 'slug' => 'activity_slug', 'data' => \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id) } Endpoints for the Cohort Get recent user activity GET: activity/cohort/{slug_or_id}?slug=activity_slug Endpoints for the coding_error's Get recent user coding_errors GET: activity/coding_error/{email_or_id}?slug=activity_slug Add a new coding_error (requiers autentication) POST: activity/coding_error/ { \"user_id\" => \"my@email.com\", \"slug\" => \"webpack_error\", \"data\" => \"optiona additional information about the error\", \"message\" => \"file not found\", \"name\" => \"module-not-found, \"severity\" => \"900\", \"details\" => \"stack trace for the error as string\" }","title":"Endpoints for the user"},{"location":"apps/admissions/","text":"BreatheCode.Admissions This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API: Manage Academies (BreatheCode let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid). Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities. Manage Students (invite and delete students). Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\". TODO: finish this documentation. Commands Sync academies python manage.py sync_admissions academies Override previous academies python manage.py sync_admissions academies --override Sync courses python manage.py sync_admissions certificates Sync cohorts python manage.py sync_admissions cohorts Sync students python manage.py sync_admissions students --limit=3 Limit: the number of students to sync","title":"BreatheCode.Admissions"},{"location":"apps/admissions/#breathecodeadmissions","text":"This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API: Manage Academies (BreatheCode let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid). Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities. Manage Students (invite and delete students). Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\". TODO: finish this documentation.","title":"BreatheCode.Admissions"},{"location":"apps/admissions/#commands","text":"","title":"Commands"},{"location":"apps/admissions/#sync-academies","text":"python manage.py sync_admissions academies Override previous academies python manage.py sync_admissions academies --override","title":"Sync academies"},{"location":"apps/admissions/#sync-courses","text":"python manage.py sync_admissions certificates","title":"Sync courses"},{"location":"apps/admissions/#sync-cohorts","text":"python manage.py sync_admissions cohorts","title":"Sync cohorts"},{"location":"apps/admissions/#sync-students","text":"python manage.py sync_admissions students --limit=3 Limit: the number of students to sync","title":"Sync students"},{"location":"apps/monitoring/introduction/","text":"Intro to monitoring This app is ideal for running diagnostic and reminders on the breathecode platform. Installation Setup a the monitor app job for once a day, this is the command: $ python manage.py monitor apps Setup a the monitor script job for once a day, this is the command: $ python manage.py monitor script","title":"Intro to monitoring"},{"location":"apps/monitoring/introduction/#intro-to-monitoring","text":"This app is ideal for running diagnostic and reminders on the breathecode platform.","title":"Intro to monitoring"},{"location":"apps/monitoring/introduction/#installation","text":"Setup a the monitor app job for once a day, this is the command: $ python manage.py monitor apps Setup a the monitor script job for once a day, this is the command: $ python manage.py monitor script","title":"Installation"},{"location":"apps/monitoring/scripts/","text":"Monitoring Scripts A monitoring script is something that you want to execute recurrently withing the breathecode API, for example: scripts/alert_pending_leads.py is a small python script that checks if there is FormEntry Marketing module database that are pending processing. You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc. Stepts to create a new script: create a new python file inside ./breathecode/monitoring/scripts make sure your script starts with this content always: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.utils import ScriptNotification # start your code here You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file. You can raise a ScriptNotification to notify for MINOR or CRITICAL reasons, for example: # here we are raising a notification because there are 2 pending tasks raise ScriptNotification(\"There are 2 pending taks\", status='MINOR', slug=\"pending_tasks\") If you dont raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. When a ScriptNotification has been raise the Application owner will recive a notification to the application.email and slack channel configured for notifications. 6. Check for other scripts as examples. Check for other scripts as examples. 7. Test your script. Test your script. Global Context There are some global variables that you have available during your scripts: Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: query.filter(academy__id=academy.id) Manually running your script You can test your scripts by running the following command: $ python manage.py run_script <file_name> # For example you can test the alert_pending_leads script like this: $ python manage.py run_script alert_pending_leads.py Example Script The following script checks for pending leads to process: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.marketing.models import FormEntry from django.db.models import Q from breathecode.utils import ScriptNotification # check the database for pending leads pending_leads = FormEntry.objects.filter(storage_status=\"PENDING\").filter(Q(academy__id=academy.id) | Q(location=academy.slug)) # trigger notification because pending leads were found if len(pending_leads) > 0: raise ScriptNotification(f\"Warning there are {len(pending_leads)} pending form entries\", status='MINOR') # You can print this and it will show on the script results print(\"No pending leads\") Unit testing your script from breathecode.monitoring.actions import run_script script = run_script(model.monitor_script) del script['slack_payload'] del script['title'] expected = {'details': script['details'], 'severity_level': 5, 'status': script['status'], 'text': script['text'] } self.assertEqual(script, expected) self.assertEqual(self.all_monitor_script_dict(), [{ **self.model_to_dict(model, 'monitor_script'), }])","title":"Monitoring Scripts"},{"location":"apps/monitoring/scripts/#monitoring-scripts","text":"A monitoring script is something that you want to execute recurrently withing the breathecode API, for example: scripts/alert_pending_leads.py is a small python script that checks if there is FormEntry Marketing module database that are pending processing. You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc.","title":"Monitoring Scripts"},{"location":"apps/monitoring/scripts/#stepts-to-create-a-new-script","text":"create a new python file inside ./breathecode/monitoring/scripts make sure your script starts with this content always: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.utils import ScriptNotification # start your code here You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file. You can raise a ScriptNotification to notify for MINOR or CRITICAL reasons, for example: # here we are raising a notification because there are 2 pending tasks raise ScriptNotification(\"There are 2 pending taks\", status='MINOR', slug=\"pending_tasks\") If you dont raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. When a ScriptNotification has been raise the Application owner will recive a notification to the application.email and slack channel configured for notifications. 6. Check for other scripts as examples. Check for other scripts as examples. 7. Test your script. Test your script.","title":"Stepts to create a new script:"},{"location":"apps/monitoring/scripts/#global-context","text":"There are some global variables that you have available during your scripts: Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: query.filter(academy__id=academy.id)","title":"Global Context"},{"location":"apps/monitoring/scripts/#manually-running-your-script","text":"You can test your scripts by running the following command: $ python manage.py run_script <file_name> # For example you can test the alert_pending_leads script like this: $ python manage.py run_script alert_pending_leads.py","title":"Manually running your script"},{"location":"apps/monitoring/scripts/#example-script","text":"The following script checks for pending leads to process: #!/usr/bin/env python \"\"\" Alert when there are Form Entries with status = PENDING \"\"\" from breathecode.marketing.models import FormEntry from django.db.models import Q from breathecode.utils import ScriptNotification # check the database for pending leads pending_leads = FormEntry.objects.filter(storage_status=\"PENDING\").filter(Q(academy__id=academy.id) | Q(location=academy.slug)) # trigger notification because pending leads were found if len(pending_leads) > 0: raise ScriptNotification(f\"Warning there are {len(pending_leads)} pending form entries\", status='MINOR') # You can print this and it will show on the script results print(\"No pending leads\")","title":"Example Script"},{"location":"apps/monitoring/scripts/#unit-testing-your-script","text":"from breathecode.monitoring.actions import run_script script = run_script(model.monitor_script) del script['slack_payload'] del script['title'] expected = {'details': script['details'], 'severity_level': 5, 'status': script['status'], 'text': script['text'] } self.assertEqual(script, expected) self.assertEqual(self.all_monitor_script_dict(), [{ **self.model_to_dict(model, 'monitor_script'), }])","title":"Unit testing your script"},{"location":"installation/configuring-the-github-secrets/","text":"Configuring the Github secrets Get Dockerhub token Add the repo to Coveralls https://coveralls.io/repos/new Add the repo to Codecov https://app.codecov.io/gh/+ Set up the secrets","title":"Configuring the Github secrets"},{"location":"installation/configuring-the-github-secrets/#configuring-the-github-secrets","text":"Get Dockerhub token Add the repo to Coveralls https://coveralls.io/repos/new Add the repo to Codecov https://app.codecov.io/gh/+ Set up the secrets","title":"Configuring the Github secrets"},{"location":"installation/editor-configs/","text":"Enable formatter in Visual Studio Code Run python -m scripts.install .","title":"Enable formatter in Visual Studio Code"},{"location":"installation/editor-configs/#enable-formatter-in-visual-studio-code","text":"Run python -m scripts.install .","title":"Enable formatter in Visual Studio Code"},{"location":"installation/fixtures/","text":"Fixtures Fixtures are fake data ideal for development. Saving new fixtures python manage.py dumpdata auth > ./breathecode/authenticate/fixtures/users.json Loading all fixtures pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json","title":"Fixtures"},{"location":"installation/fixtures/#fixtures","text":"Fixtures are fake data ideal for development.","title":"Fixtures"},{"location":"installation/fixtures/#saving-new-fixtures","text":"python manage.py dumpdata auth > ./breathecode/authenticate/fixtures/users.json","title":"Saving new fixtures"},{"location":"installation/fixtures/#loading-all-fixtures","text":"pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json","title":"Loading all fixtures"},{"location":"security/capabilities/","text":"Capabilities Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing. Authenticated methods must be decorated with the @capable_of decorator in increase security validation. For example: from breathecode.utils import capable_of @capable_of('crud_member') def post(self, request, academy_id=None): serializer = StaffPOSTSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Any view decorated with the @capable_of must be used passing an academy id either: Anywhere on the endpoint url, E.g: path('academy/<int:academy_id>/member', MemberView.as_view()), Or on the request header using the Academy header. Available capabilities: This list is alive, it will grow and vary overe time: slug description read_members Allows reading the list of academy members crud_members Allows creating, deleting and updating academy members","title":"Capabilities"},{"location":"security/capabilities/#capabilities","text":"Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing. Authenticated methods must be decorated with the @capable_of decorator in increase security validation. For example: from breathecode.utils import capable_of @capable_of('crud_member') def post(self, request, academy_id=None): serializer = StaffPOSTSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Any view decorated with the @capable_of must be used passing an academy id either: Anywhere on the endpoint url, E.g: path('academy/<int:academy_id>/member', MemberView.as_view()), Or on the request header using the Academy header.","title":"Capabilities"},{"location":"security/capabilities/#available-capabilities","text":"This list is alive, it will grow and vary overe time: slug description read_members Allows reading the list of academy members crud_members Allows creating, deleting and updating academy members","title":"Available capabilities:"},{"location":"services/google_cloud/google-cloud-functions/","text":"Google Cloud Functions Write a HTTP function https://cloud.google.com/functions/docs/writing/http See active functions https://console.cloud.google.com/functions/list?project=breathecode-197918&_ga=2.252299017.106570839.1625533908-188955223.1618985878 Testing function https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python List functions Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator","title":"Google Cloud Functions"},{"location":"services/google_cloud/google-cloud-functions/#google-cloud-functions","text":"","title":"Google Cloud Functions"},{"location":"services/google_cloud/google-cloud-functions/#write-a-http-function","text":"https://cloud.google.com/functions/docs/writing/http","title":"Write a HTTP function"},{"location":"services/google_cloud/google-cloud-functions/#see-active-functions","text":"https://console.cloud.google.com/functions/list?project=breathecode-197918&_ga=2.252299017.106570839.1625533908-188955223.1618985878","title":"See active functions"},{"location":"services/google_cloud/google-cloud-functions/#testing-function","text":"https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python","title":"Testing function"},{"location":"services/google_cloud/google-cloud-functions/#list-functions","text":"Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator","title":"List functions"},{"location":"services/google_cloud/storage/","text":"Storage Storage Google Cloud Storage file ( self , bucket_name , file_name ) Get File object Parameters: Name Type Description Default bucket_name str Name of bucket in Google Cloud Storage required file_name str Name of blob in Google Cloud Bucket required Returns: Type Description File File object Source code in breathecode/services/google_cloud/storage.py def file ( self , bucket_name : str , file_name : str ): \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name )","title":"Storage"},{"location":"services/google_cloud/storage/#storage","text":"","title":"Storage"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage","text":"Google Cloud Storage","title":"Storage"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage.file","text":"Get File object Parameters: Name Type Description Default bucket_name str Name of bucket in Google Cloud Storage required file_name str Name of blob in Google Cloud Bucket required Returns: Type Description File File object Source code in breathecode/services/google_cloud/storage.py def file ( self , bucket_name : str , file_name : str ): \"\"\"Get File object Args: bucket_name (str): Name of bucket in Google Cloud Storage file_name (str): Name of blob in Google Cloud Bucket Returns: File: File object \"\"\" bucket = self . client . bucket ( bucket_name ) return File ( bucket , file_name )","title":"file()"},{"location":"services/slack%20integration/icons/","text":"Icons The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1","title":"Icons"},{"location":"services/slack%20integration/icons/#icons","text":"The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1","title":"Icons"},{"location":"testing/testing/","text":"Testing Run tests pipenv run test ./breathecode/ Run tests in parallel pipenv run ptest ./breathecode/ Run coverage pipenv run cov breathecode Run coverage in parallel pipenv run pcov breathecode Testing inside Docker (fallback option) Check which dependencies you need install in you operating system pipenv run doctor or python -m scripts.doctor . Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . Generate the BreatheCode Shell image with pipenv run docker_build_shell . Run BreatheCode Shell with docker-compose run bc-shell Run pipenv run test , pipenv run ptest , pipenv run cov or pipenv run pcov .","title":"Testing"},{"location":"testing/testing/#testing","text":"","title":"Testing"},{"location":"testing/testing/#run-tests","text":"pipenv run test ./breathecode/","title":"Run tests"},{"location":"testing/testing/#run-tests-in-parallel","text":"pipenv run ptest ./breathecode/","title":"Run tests in parallel"},{"location":"testing/testing/#run-coverage","text":"pipenv run cov breathecode","title":"Run coverage"},{"location":"testing/testing/#run-coverage-in-parallel","text":"pipenv run pcov breathecode","title":"Run coverage in parallel"},{"location":"testing/testing/#testing-inside-docker-fallback-option","text":"Check which dependencies you need install in you operating system pipenv run doctor or python -m scripts.doctor . Instal docker desktop in you use Windows else find a guide to install Docker and Docker Compose in your linux distribution uname -a . Generate the BreatheCode Shell image with pipenv run docker_build_shell . Run BreatheCode Shell with docker-compose run bc-shell Run pipenv run test , pipenv run ptest , pipenv run cov or pipenv run pcov .","title":"Testing inside Docker (fallback option)"}]}